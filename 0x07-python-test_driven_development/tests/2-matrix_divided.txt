module '2-matrix_divided.py'

-----------------------------

using 'matrix_divided'

-----------------------------

Importing function from the module:
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

passing wrong arguments
>>> matrix_divided([[], [], []])
Traceback (most recent call last):
	...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

passing empty matrix
>>> matrix_divided([[], [], []], 2)
[[], [], []]

passing ordinary matrix and div = 2
>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2)
[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0], [3.5, 4.0, 4.5]]

passing div = large number
>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10000000000000)
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

passing float numbers in the matrix
>>> matrix_divided([[1.1, 2.2, 3.2], [4.2, 5.2, 6.2], [7.2, 8.2, 9.3]], 3)
[[0.37, 0.73, 1.07], [1.4, 1.73, 2.07], [2.4, 2.73, 3.1]]

passing negative numbers
>>> matrix_divided([[-1.1, -2.2, -3.2], [-4.2, -5.2, -6.2], [-7.2, -8.2, -9.3]], 3)
[[-0.37, -0.73, -1.07], [-1.4, -1.73, -2.07], [-2.4, -2.73, -3.1]]

passing negative div
>>> matrix_divided([[-1.1, -2.2, -3.2], [-4.2, -5.2, -6.2], [-7.2, -8.2, -9.3]], -3)
[[0.37, 0.73, 1.07], [1.4, 1.73, 2.07], [2.4, 2.73, 3.1]]

passing float div
>>> matrix_divided([[-1.1, -2.2, -3.2], [-4.2, -5.2, -6.2], [-7.2, -8.2, -9.3]], 3.0)
[[-0.37, -0.73, -1.07], [-1.4, -1.73, -2.07], [-2.4, -2.73, -3.1]]

passing string div
>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 'alx')
Traceback (most recent call last):
	...
TypeError: div must be a number

passing div None
>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], None)
Traceback (most recent call last):
	...
TypeError: div must be a number

passing div = 0
>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0)
Traceback (most recent call last):
	...
ZeroDivisionError: division by zero

passing None matrix
>>> matrix_divided(None, 2)
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats

passing empty matrix
>>> matrix_divided([], 4)
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats

passing matrix of 1 None element
>>> matrix_divided([None], 4)
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats

passing matrix of strings
>>> matrix_divided(['alx', 'hello'], 4)
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats

passing boolean matrix
>>> matrix_divided(True, 4)
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats

passing a tuple as matrix
>>> matrix_divided((1, 2, 3), 4)
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats

passing matrix of tuples
>>> matrix_divided([(1, 2, 3), (1, 2, 3)], 4)
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats

passing matrix as integer
>>> matrix_divided(5, 4)
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats

passing 'nan' matrix
>>> matrix_divided('nan', 4)
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats

passing unequal row sizes matrix
>>> matrix_divided([[1, 2, 3], [4, 5], [6, 7, 8]], 4)
Traceback (most recent call last):
	...
TypeError: Each row of the matrix must have the same size

passing empty row in the matrix
>>> matrix_divided([[1, 2, 3], [], [6, 7, 8]], 4)
Traceback (most recent call last):
	...
TypeError: Each row of the matrix must have the same size
